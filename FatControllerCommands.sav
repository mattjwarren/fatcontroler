alias input:'<<'!='' +* create:self.define_alias(SplitCmd[1],SplitCmd[2:])
define entity input:not(self.EntityManager.isEntity('<<')) input:'<<'!='' +* create:self.EntityManager.define(SplitCmd[2],SplitCmd[3:])
def entity input:not(self.EntityManager.isEntity('<<')) input:'<<'!='' +* create:self.EntityManager.define(SplitCmd[2],SplitCmd[3:])
delete entity input:self.EntityManager.isEntity('<<') create:self.EntityManager.delete(SplitCmd[2])
del entity input:self.EntityManager.isEntity('<<') create:self.EntityManager.delete(SplitCmd[2])
delete alias input:self.is_alias('<<') create:self.del_alias(SplitCmd[2])
del alias input:self.is_alias('<<') create:self.del_alias(SplitCmd[2])
delete substitution input:self.issubstitute('<<') create:self.delsubstitution(SplitCmd[2])
delete sub input:self.issubstitute('<<') create:self.delsubstitution(SplitCmd[2])
del substitution input:self.issubstitute('<<') create:self.delsubstitution(SplitCmd[2])
del sub input:self.issubstitute('<<') create:self.delsubstitution(SplitCmd[2])
execute input:self.EntityManager.isEntity('<<') input:'<<'!='' +* create:self.EntityManager.execute(SplitCmd[1],SplitCmd[2:])
exec input:self.EntityManager.isEntity('<<') input:'<<'!='' +* create:self.EntityManager.execute(SplitCmd[1],SplitCmd[2:])
x input:self.EntityManager.isEntity('<<') input:'<<'!='' +* create:self.EntityManager.execute(SplitCmd[1],SplitCmd[2:])
exit create:sys.exit(0)
quit create:sys.exit(0)
help create:self.displayhelp()
load input:'<<'!='' create:self.load(SplitCmd[1])
save input:'<<'==('all') input:not(00) create:self.save(SplitCmd[1],SplitCmd[2])
show entities create:self.EntityManager.show()
show aliases create:self.show_aliases()
show substitutions create:self.showsubstitutions()
show subs create:self.showsubstitutions()
show daemons create:self.show_daemons()
substitute input:'<<'!='' create:self.definesubstitution(SplitCmd[1],SplitCmd[2:])
sub input:'<<'!='' create:self.definesubstitution(SplitCmd[1],SplitCmd[2:])
trace input:'<<'!='' create:self.toggletrace(SplitCmd[1])
set input:'<<'!='' input:'<<'!='' input:'<<'!='' +* create:self.SetOption(SplitCmd[1],SplitCmd[2],'::SPACE::'.join(SplitCmd[3:]))
show options create:self.displayopts()
define daemon input:'<<'!='' create:self.create_daemon(SplitCmd[2])
def daemon input:'<<'!='' create:self.create_daemon(SplitCmd[2])
define schedule input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.schedule_daemon(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5])
define sched input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.schedule_daemon(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5])
def schedule input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.schedule_daemon(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5])
def sched input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.schedule_daemon(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5])
define task input:self.is_daemon('<<') input:'<<'!='' +* create:self.add_daemon_task(SplitCmd[2],SplitCmd[3],SplitCmd[4:])
define collector input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.add_daemon_task_collector(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5],SplitCmd[6],SplitCmd[7],SplitCmd[8])
subscribe entity input:self.is_daemon('<<') input:'<<'!='' input:self.EntityManager.isEntity('<<') create:self.add_daemon_task_entity(SplitCmd[2],SplitCmd[3],SplitCmd[4])
subs entity input:self.is_daemon('<<') input:'<<'!='' input:self.EntityManager.isEntity('<<') create:self.add_daemon_task_entity(SplitCmd[2],SplitCmd[3],SplitCmd[4])
def task input:self.is_daemon('<<') input:'<<'!='' +* create:self.add_daemon_task(SplitCmd[2],SplitCmd[3],SplitCmd[4:])
def collector input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' create:self.add_daemon_task_collector(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5],SplitCmd[6],SplitCmd[7],SplitCmd[8])
def alert input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' +*  create:self.add_daemon_task_collector_alert(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5],SplitCmd[6],'::SPACE::'.join(SplitCmd[7:]),SplitCmd[-2:-1],SplitCmd[-1:])
define alert input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' input:'<<'!='' +*  create:self.add_daemon_task_collector_alert(SplitCmd[2],SplitCmd[3],SplitCmd[4],SplitCmd[5],SplitCmd[6],'::SPACE::'.join(SplitCmd[7:-2]),SplitCmd[-2:-1],SplitCmd[-1:])
delete daemon input:self.is_daemon('<<') create:self.remove_daemon(SplitCmd[2])
del daemon input:self.is_daemon('<<') create:self.remove_daemon(SplitCmd[2])
delete task input:self.is_daemon('<<') input:'<<'!='' create:self.remove_daemon_task(SplitCmd[2],SplitCmd[3])
del task input:self.is_daemon('<<') input:'<<'!='' create:self.remove_daemon_task(SplitCmd[2],SplitCmd[3])
update task input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.update_daemon_task(SplitCmd[2],SplitCmd[3],SplitCmd[4:])
upd task  input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.update_daemon_task(SplitCmd[2],SplitCmd[3],SplitCmd[4:])
delete collector input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.remove_daemon_task_collector(SplitCmd[2],SplitCmd[3],SplitCmd[4])
del collector input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.remove_daemon_task_collector(SplitCmd[2],SplitCmd[3],SplitCmd[4])
unsubscribe entity input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.remove_daemon_task_entity(SplitCmd[2],SplitCmd[3],SplitCmd[4])
unsub entity input:self.is_daemon('<<') input:'<<'!='' input:'<<'!='' create:self.remove_daemon_task_entity(SplitCmd[2],SplitCmd[3],SplitCmd[4])
activate daemon input:self.is_daemon('<<') create:self.make_daemon_live(SplitCmd[2])
act daemon input:self.is_daemon('<<') create:self.make_daemon_live(SplitCmd[2])
show active daemons create:self.show_active_daemons()
deactivate daemon input:self.is_daemon('<<') create:self.kill_daemon(SplitCmd[2])
deac daemon input:self.is_daemon('<<') create:self.kill_daemon(SplitCmd[2])
alerts create:self.show_alert_queue()
show alerts create:self.show_alert_queue()
handle input:'<<'!='' input:'<<'!='' create:self.handlealertrange(int(SplitCmd[1]),int(SplitCmd[2]))
handle input:'<<'!='' create:self.handlealertrange(int(SplitCmd[1]))
addline input:'<<'!='' +* create:self.appendtoscript(SplitCmd[1],SplitCmd[2:])
insline input:'<<'!='' input:'<<'!='' +* create:self.insert_to_script(SplitCmd[1],SplitCmd[2],SplitCmd[3:])
delline input:'<<'!='' input:'<<'!='' create:self.delfromscript(SplitCmd[1],SplitCmd[2])
run input:self.isScript('<<') +* create:self.runscript(SplitCmd[1],SplitCmd[2:])
delete script input:'<<'!='' create:self.delscript(SplitCmd[2])
del script input:self.isScript('<<') create:self.delscript(SplitCmd[2])
show script input:self.isScript('<<') create:self.showscripts(SplitCmd[2])
show scripts create:self.showscripts('all')
message input:'<<'!='' +* create:self.message(SplitCmd[1:])
msg input:'<<'!='' +* create:self.message(SplitCmd[1:])
ENDDCOMMANDDEFS
#
#Copyright 2005 MatthewWarren.
